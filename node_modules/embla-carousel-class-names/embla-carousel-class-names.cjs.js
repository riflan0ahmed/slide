'use strict';

var EmblaCarousel = require('embla-carousel');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var EmblaCarousel__default = /*#__PURE__*/_interopDefaultLegacy(EmblaCarousel);

var defaultOptions = {
  active: true,
  breakpoints: {},
  selected: 'is-selected',
  draggable: 'is-draggable',
  dragging: 'is-dragging'
};

function removeClass(node, className) {
  var cl = node.classList;
  if (className && cl.contains(className)) cl.remove(className);
}
function addClass(node, className) {
  var cl = node.classList;
  if (className && !cl.contains(className)) cl.add(className);
}

function ClassNames(userOptions) {
  var optionsHandler = EmblaCarousel__default["default"].optionsHandler();
  var optionsBase = optionsHandler.merge(defaultOptions, ClassNames.globalOptions);
  var options;
  var carousel;
  var root;
  var slides;
  var selectedEvents = ['select', 'pointerUp'];
  var draggingEvents = ['pointerDown', 'pointerUp'];

  function init(embla) {
    carousel = embla;
    options = optionsHandler.atMedia(self.options);
    root = carousel.rootNode();
    slides = carousel.slideNodes();
    var isDraggable = carousel.internalEngine().options.draggable;

    if (isDraggable) {
      addClass(root, options.draggable);
    }

    if (options.dragging) {
      draggingEvents.forEach(function (evt) {
        return carousel.on(evt, toggleDraggingClass);
      });
    }

    if (options.selected) {
      selectedEvents.forEach(function (evt) {
        return carousel.on(evt, toggleSelectedClass);
      });
      toggleSelectedClass();
    }
  }

  function destroy() {
    removeClass(root, options.draggable);
    draggingEvents.forEach(function (evt) {
      return carousel.off(evt, toggleDraggingClass);
    });
    selectedEvents.forEach(function (evt) {
      return carousel.off(evt, toggleSelectedClass);
    });
    slides.forEach(function (slide) {
      return removeClass(slide, options.selected);
    });
  }

  function toggleDraggingClass(evt) {
    if (evt === 'pointerDown') addClass(root, options.dragging);else removeClass(root, options.dragging);
  }

  function toggleSelectedClass() {
    var inView = carousel.slidesInView(true);
    var notInView = carousel.slidesNotInView(true);
    notInView.forEach(function (index) {
      return removeClass(slides[index], options.selected);
    });
    inView.forEach(function (index) {
      return addClass(slides[index], options.selected);
    });
  }

  var self = {
    name: 'classNames',
    options: optionsHandler.merge(optionsBase, userOptions),
    init: init,
    destroy: destroy
  };
  return self;
}

ClassNames.globalOptions = undefined;

module.exports = ClassNames;
//# sourceMappingURL=embla-carousel-class-names.cjs.js.map
