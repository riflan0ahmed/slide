import { FC, useState, useEffect, useCallback, useRef } from "react";
import useEmblaCarousel from "embla-carousel-react";
import ClassNames from "embla-carousel-class-names";
import Head from "next/head";
import { Switch, Case } from "react-if";
import BlockVideo from "components/shared/Blocks/Video/Video";
import BlockSlider from "components/shared/Blocks/Slider/Slider";

export const DotButton = (props: { selected?: any; onClick?: any }) => (
    <button className={`embla__dot ${props.selected ? "is-selected" : ""}`} type="button" onClick={props.onClick} />
);

interface ViewHomeProps {
    data: any;
}

const ViewHome: FC<ViewHomeProps> = ({ data }) => {
    const divRef = useRef<HTMLDivElement>(null);
    const [viewportRef, embla] = useEmblaCarousel({ loop: false, inViewThreshold: 1, draggable: false }, [ClassNames()]);
    const [prevBtnEnabled, setPrevBtnEnabled] = useState(false);
    const [nextBtnEnabled, setNextBtnEnabled] = useState(false);
    const [selectedIndex, setSelectedIndex] = useState(0);
    const [scrollSnaps, setScrollSnaps] = useState<number[]>([]);

    const scrollPrev = useCallback(() => embla && embla.scrollPrev(), [embla]);
    const scrollNext = useCallback(() => embla && embla.scrollNext(), [embla]);
    const scrollTo = useCallback((index: number) => embla && embla.scrollTo(index), [embla]);

    const toggleEmblaReady = useCallback(
        (event: any) => {
            if (!embla) return;
            const isResizeEvent = event === "resize";
            const toggleClass = isResizeEvent ? "remove" : "add";
            divRef.current?.classList[toggleClass]("embla--is-ready");
            if (isResizeEvent) embla?.reInit();
        },
        [embla]
    );

    const onSelect = useCallback(() => {
        if (!embla) return;
        setSelectedIndex(embla.selectedScrollSnap());
        setPrevBtnEnabled(embla.canScrollPrev());
        setNextBtnEnabled(embla.canScrollNext());
    }, [embla, setSelectedIndex]);

    useEffect(() => {
        if (!embla) return;
        embla.on("select", onSelect);
        embla.on("reInit", onSelect);

        embla.on("init", toggleEmblaReady);
        embla.on("resize", toggleEmblaReady);
        embla.on("reInit", toggleEmblaReady);

        onSelect();
        toggleEmblaReady(embla);

        setScrollSnaps(embla.scrollSnapList());
    }, [embla, onSelect]);

    useEffect(() => {
        if (!embla) return;
        embla.internalEngine().translate.toggleActive(false);
        embla.internalEngine().translate.clear();
    }, [embla]);

    return (
        <div className="block">
            <Head>
                <title>Slide</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main>
                <div className="embla" ref={divRef}>
                    <div className="embla__viewport" ref={viewportRef}>
                        <div className="embla__container">
                            {data.data.map((item: any, index: number) => (
                                <Switch key={index}>
                                    <Case condition={item.typename === "BlockVideo"}>
                                        <div className="embla__slide">
                                            <BlockVideo scrollNext={scrollNext} nextBtnEnabled={nextBtnEnabled} item={item} />
                                        </div>
                                    </Case>
                                    <Case condition={item.typename === "BlockSlider"}>
                                        <div className="embla__slide">
                                            <BlockSlider scrollPrev={scrollPrev} prevBtnEnabled={prevBtnEnabled} item={item} />
                                        </div>
                                    </Case>
                                </Switch>
                            ))}
                        </div>
                    </div>
                </div>
                <div className="embla__dots">
                    {scrollSnaps.map((_, index: number) => (
                        <DotButton key={index} selected={index === selectedIndex} onClick={() => scrollTo(index)} />
                    ))}
                </div>
            </main>
        </div>
    );
};

export default ViewHome;
